\\\\https://www.baeldung.com/linux/network-interface-configure#:~:text=To%20clarify%2C%20%2Fetc%2Fnetwork,interface%20either%20statically%20or%20dynamically

everything relted to network interface is in above lin
Network Interface?
a network interface is the point of connection between a computer and a network

A network interface is just a connection point between your computer (or server) and a network (like the internet or a local network).

Interface	What it means        	 	Example name in Linux
🧵 Ethernet	Wired connection		       eth0, enp0s3
📶 Wi-Fi	Wireless connection	           wlan0
🔁 Loopback	Internal(connects to itself)		lo
🌐 Virtual	Used by virtual machines or Docker	docker0, veth1234

enp0s3==en(Ethernet (wired connection))--p0==(PCI bus number → 0)--s3==Slot number → 3
pci==Peripheral Component Interconnect.
It’s a hardware bus (a kind of connection system) inside your computer that lets the CPU talk to devices like:
Network cards (Ethernet, Wi-Fi)
Sound cards
Graphics cards (GPUs)
USB controllers
Storage controllers

To See All Network Interfaces
ip link show

Bring the Interface Up or Down
sudo ip link set enp0s3 down
sudo ip link set enp0s3 up


 1. Old Style (Classic names)

Old Linux systems (before 2015) used short, easy names:

Type	              Example name			Meaning
Ethernet (wired)	eth0, eth1, eth2	First, second, third Ethernet port
Wi-Fi (wireless)	wlan0, wlan1		First, second wireless card
Loopback	 	lo		Always the internal “self” connection

Example:
If you plugged in two Ethernet cables, Linux would name them eth0 and eth1.

✅ Simple, but...
❌ Sometimes names changed randomly after reboot or hardware change — which caused server problems.



2. New Style (Predictable names)

To fix that, Linux introduced Predictable Network Interface Names around 2015.

These names describe where the hardware is physically connected on the motherboard.

Examples:

New Name	Type			Meaning
enp3s0	 	Ethernet	en = Ethernet, p3 = PCI bus 3, s0 = slot 0
ens33		Ethernet	Ethernet, slot 33
wlp2s0		Wi-Fi		wl = Wireless LAN, p2 = PCI bus 2, s0 = slot 0

🧠 These names come from hardware location, not boot order —
so they never change when you restart or plug new devices.


------------------------------------------------------------
https://www.baeldung.com/linux/network-interface-configure#:~:text=To%20clarify%2C%20%2Fetc%2Fnetwork,interface%20either%20statically%20or%20dynamically

.
.
..
.


--- vim 30 commands main r downloaded



.
..



sudo nano /etc/network/interfaces

everything relted to network interface is in above lin
Network Interface?
a network interface is the point of connection between a computer and a network

A network interface is just a connection point between your computer (or server) and a network (like the internet or a local network).

Interface	What it means        	 	Example name in Linux
🧵 Ethernet	Wired connection		    eth0, enp0s3
📶 Wi-Fi	        Wireless connection	             		   wlan0
🔁 Loopback	Internal (connects to itself)		lo
🌐 Virtual	Used by virtual machines or Docker	docker0, veth1234



 1. Old Style (Classic names)

Old Linux systems (before 2015) used short, easy names:

Type	              Example name			Meaning
Ethernet (wired)	eth0, eth1, eth2	First, second, third Ethernet port
Wi-Fi (wireless)	wlan0, wlan1		First, second wireless card
Loopback	 	lo		Always the internal “self” connection

Example:
If you plugged in two Ethernet cables, Linux would name them eth0 and eth1.

✅ Simple, but...
❌ Sometimes names changed randomly after reboot or hardware change — which caused server problems.




2. New Style (Predictable names)

To fix that, Linux introduced Predictable Network Interface Names around 2015.

These names describe where the hardware is physically connected on the motherboard.

Examples:

New Name	Type			Meaning
enp3s0	 	Ethernet	en = Ethernet, p3 = PCI bus 3, s0 = slot 0
ens33		Ethernet	Ethernet, slot 33
wlp2s0		Wi-Fi		wl = Wireless LAN, p2 = PCI bus 2, s0 = slot 0

🧠 These names come from hardware location, not boot order —
so they never change when you restart or plug new devices.


--------

NETWORK INTERFACE CARD

 ls command and the sys file system to quickly list the available network
 interfaces. Each entry in the /sys/class/net directory represents a physical or virtual network interface:

 ls /sys/class/net

To get more details about the network interfaces. we can use the
 ip link command:
Here, we can see three network interfaces, their type, and their state.
 Alternatively, we can also use the ifconfig command.

In addition, to get the IP address and other related information, we use  the ip addr command:

You can open it with:

sudo nano /etc/network/interfaces

man ip link
man ip
man ip address
ifquery


-----

What Is /etc/network/interfaces?

It’s the file in Linux (especially Debian or older Ubuntu) that tells the system how to connect to the internet — which network card to use, what IP to give, and whether it’s static or dynamic.

Think of it like a Wi-Fi settings file that loads automatically when your system starts.

⚙️ Basic Syntax
1. Start network interface automatically at boot:
auto eth0


💬 Means: "Start the Ethernet (eth0) connection automatically when the system boots."

2. Define how a network interface behaves:
iface <interface> <address_family> <method>


Example:

iface eth0 inet dhcp


Meaning:

iface → defines a network interface

eth0 → the interface name (like your LAN cable)

inet → IPv4 protocol

dhcp → get IP automatically from the router

🌐 Two Ways to Get IP
🟢 1. Dynamic (Automatic) — DHCP

Let the router assign IP automatically:

auto eth0
iface eth0 inet dhcp

🔵 2. Static (Manual)

You assign IP yourself:

auto eth0
iface eth0 inet static
    address 192.168.1.100
    netmask 255.255.255.0
    gateway 192.168.1.1
    dns-nameservers 8.8.8.8 8.8.4.4


💬 This means:

Always use IP → 192.168.1.100

Router (gateway) → 192.168.1.1

Google DNS → 8.8.8.8, 8.8.4.4

⚡ Special Options
Option	Meaning
pre-up <command>	Run this command before interface starts
post-up <command>	Run this command after interface starts
pre-down <command>	Run this command before interface stops
post-down <command>	Run this command after interface stops

Example:

pre-up /usr/local/sbin/start-iptables.sh
post-down /usr/local/sbin/backup-log.sh


💬 Means run the firewall before connecting, and backup logs after disconnecting.

🔁 Enable or Disable Interfaces Manually

You can manually start or stop a network interface:

sudo ifup eth0     # Turn ON the network
sudo ifdown eth0   # Turn OFF the network


After editing the file, apply changes by:

sudo ifdown eth0 && sudo ifup eth0

🧩 Full Example

Here’s how a full static configuration looks:

auto eth0
iface eth0 inet static
    address 192.168.1.100
    netmask 255.255.255.0
    gateway 192.168.1.1
    dns-nameservers 8.8.8.8 8.8.4.4
pre-up /usr/local/sbin/start-iptables.sh
post-down /usr/local/sbin/backup-log.sh

🚫 Why Your /etc/network/interfaces File Might Be Empty

If the file is empty — don’t panic 😄
It usually means another tool is managing your network, like:

NetworkManager (used on desktop Ubuntu)

Netplan (used on newer Ubuntu versions)

To use /etc/network/interfaces, you need to disable NetworkManager:

sudo systemctl stop NetworkManager.service
sudo systemctl disable NetworkManager.service


----------

sudo nana /etc/network/interface

Step 2: Paste this content

Paste your configuration (replace eth0 with your interface name — e.g. ens33 if that’s what your system uses):

auto ens33
iface ens33 inet static
    address 192.168.1.100
    netmask 255.255.255.0
    gateway 192.168.1.1
    dns-nameservers 8.8.8.8 8.8.4.4
pre-up /usr/local/sbin/start-iptables.sh
post-down /usr/local/sbin/backup-log.sh

🔹 Step 3: Save & Exit

Press:

CTRL + O → Enter → CTRL + X

🔹 Step 4: Restart Networking

To apply your new configuration, run:

sudo ifdown ens33 && sudo ifup ens33


or restart your network service:

sudo systemctl restart networking

/
/
/
3.	GREP:
a.	grep one number, multiple numbers, everything except one number
b.	grep case sensitive/insensitive character 
c.	grep specific files with patterns
d.	use grep to look for files which contains the word for instance 'HTTP'
e.	use grep to count numbers having prefix 0301,0302                                         
f.	grep two lines of trailing context after each match                                            
g.	grep two lines of leading context before each match                                        
h.	grep two lines of leading and trailing context surrounding each match   
i.	grep regex matching (just study it to how know)


What is grep?

grep is used to search for text patterns inside files or output.
It shows lines that match what you’re looking for.

Example:

grep "error" /var/log/syslog


👉 Finds all lines containing the word “error” in the syslog file.

🔹 a. grep one number, multiple numbers, everything except one number

Let’s say we have a file called numbers.txt like:

0301
0302
0303
0401
0502

👉 Find one number (e.g., 0301):
grep "0301" numbers.txt

👉 Find multiple numbers (e.g., 0301 or 0302):
grep -E "0301|0302" numbers.txt


(-E enables extended regex for “OR” patterns.)

👉 Find everything except one number (e.g., not 0301):
grep -v "0301" numbers.txt


(-v = inverse match → exclude pattern)

🔹 b. grep case sensitive / insensitive

Suppose you have:

HTTP
http
Https

Case sensitive (default)
grep "HTTP" file.txt


→ Only matches HTTP (uppercase).

Case insensitive
grep -i "http" file.txt


→ Matches HTTP, http, and Https.

🔹 c. grep specific files with patterns

Search for a pattern in specific files:

grep "root" /etc/passwd


Search inside multiple files:

grep "error" *.log


Search recursively in a directory:

grep -r "error" /var/log

🔹 d. use grep to look for files containing a word (e.g. “HTTP”)

You can search inside all files:

grep -rl "HTTP" /etc


-r → recursive

-l → list only filenames that contain the word

🔹 e. use grep to count numbers having prefix 0301, 0302
grep -E "0301|0302" numbers.txt | wc -l


-E → extended regex for OR patterns

wc -l → counts number of matching lines

🔹 f. grep two lines of trailing context after each match

If your file has:

Line1
Error
Line2
Line3


and you run:

grep -A 2 "Error" logfile.txt


-A (After) shows 2 lines after the match:

Error
Line2
Line3

🔹 g. grep two lines of leading context before each match
grep -B 2 "Error" logfile.txt


-B (Before) shows 2 lines before the match:

Line1
Error

🔹 h. grep two lines of leading and trailing context
grep -C 2 "Error" logfile.txt


-C (Context) = 2 lines before and after each match.

🔹 i. grep regex matching (just study it)

Regular expressions (regex) allow advanced searching — patterns instead of plain text.

Examples:

grep -E "^[0-9]{4}$" numbers.txt


→ matches exactly 4 digits

grep -E "^[A-Z]+" file.txt


→ matches lines starting with uppercase letters

✅ Summary Table
Option	Meaning	Example
-i	Ignore case	grep -i "http" file
-v	Invert match	grep -v "0301" file
-r	Recursive search	grep -r "error" /etc
-l	Show only filenames	grep -l "HTTP" /etc
-A N	Show N lines after	grep -A 2 "error" log
-B N	Show N lines before	grep -B 2 "error" log
-C N	Show N lines around	grep -C 2 "error" log

------------------------------------------

4.	VIM:
a.	copy pasting, syntaxing, search and replace and etc.
b.	search a number in file
c.	replace 92 from start of every number                     
d.	replace 0 from start of every number with 921     
e.	add "Ufone" at the end of every number                 
f.	add "Ufone" at the start of every number     


Mode	What it does	How to enter
Normal Mode	Move, copy, delete, search	Press Esc
Insert Mode	Type or edit text	Press i
Command Mode	Run commands like save, replace, quit	Press :
⚙️ a. Copy, Paste, Search, Replace, etc.
Copy (Yank)

yy → copy (yank) one line

2yy → copy two lines

yG → copy from current line to end of file

Paste

p → paste below

P → paste above

Cut (Delete)

dd → delete (cut) one line

2dd → delete two lines

Undo / Redo

u → undo

Ctrl + r → redo

Search for Text

/word → search forward for “word”

n → next match

N → previous match

Replace Text

:%s/old/new/g → replace all “old” with “new”

:%s/old/new/gc → same but asks for confirmation each time

🔢 b. Search a Number in File

In Vim (Normal mode), type:

/[0-9]


→ searches for any number.
You can press n to jump to the next one.

If you want to find specific numbers (like 0301):

/0301

🔁 c. Replace 92 from Start of Every Number

Let’s say you have:

9234567
9201111
9233333
0301333


Command:

:%s/^92//


Explanation:

% → entire file

s → substitute

^92 → means “92 at the start of a line”

// → replace with nothing (remove it)

Result:

34567
01111
33333
0301333

🔁 d. Replace 0 from Start of Every Number with 921

If you have:

0301
0302
0303


Command:

:%s/^0/921/


Explanation:

^0 → means “0 at start of line”

921 → the replacement text

Result:

921301
921302
921303

🏷️ e. Add “Ufone” at the End of Every Number

Command:

:%s/$/ Ufone/


Explanation:

$ → end of line

Adds " Ufone" at the end of each line

Result:

921301 Ufone
921302 Ufone
921303 Ufone

🏷️ f. Add “Ufone” at the Start of Every Number

Command:

:%s/^/Ufone /


Explanation:

^ → start of line

Adds "Ufone " before each line

Result:

Ufone 921301
Ufone 921302
Ufone 921303

🧩 Bonus Tips
Action	Command
Save	:w
Quit	:q
Save + Quit	:wq
Quit without saving	:q!
Show line numbers	:set number
Go to line 10	:10
Select multiple lines	V + move down

------------------------------


	GREP: VIM: AWK: SED
a.	delete all numbers starting from 92, replace end line character with anything else etc etc.
b.	Count of lines this file contains
c.	Each line starts with datetime then log type, count 'Sent SMS' logs.
d.	Get output which contains the first 10 'Sent SMS' logs on terminal.  
e.	Get output which contains the first 25 'Sent SMS' logs on terminal.  
f.	Get output which contains the last 15 'Sent SMS' logs on terminal.  
g.	Sort out the details on terminal from 'Sent SMS' logs in such format:"date time, Source_Mask, Destination, Message Length"


et’s assume you have a log file named logs.txt containing lines like 👇

2025-10-22 10:15:32 INFO Sent SMS Source_Mask=92300 Destination=923111111111 Length=150
2025-10-22 10:15:33 INFO Sent SMS Source_Mask=92301 Destination=923222222222 Length=140
2025-10-22 10:15:34 WARN Failed to send SMS Source_Mask=92302 Destination=923333333333
2025-10-22 10:15:35 INFO Sent SMS Source_Mask=92303 Destination=923444444444 Length=130


We’ll use this file to practice each command.

🧹 a. Delete all numbers starting from 92, replace end line character with anything else, etc.
Using sed:
Delete numbers starting with 92:
sed 's/92[0-9]*//g' logs.txt


Explanation:

s/old/new/g → substitute globally

92[0-9]* → match 92 followed by any digits

// → replace with nothing (delete)

Result example:

2025-10-22 10:15:32 INFO Sent SMS Source_Mask= Destination= Length=150

Replace end-of-line character $ with something (like “#”):
sed 's/$/#/' logs.txt


→ adds a # at the end of each line.

🔢 b. Count of lines this file contains
Using wc:
wc -l logs.txt


→ shows total number of lines in file.

OR using grep:
grep -c "" logs.txt


→ counts all lines (since every line matches the empty string).

📨 c. Each line starts with datetime then log type — count ‘Sent SMS’ logs
Using grep:
grep -c "Sent SMS" logs.txt


→ shows how many lines contain the words “Sent SMS”.

Using awk:
awk '/Sent SMS/ {count++} END {print count}' logs.txt


→ counts using AWK script.

🔟 d. Show first 10 “Sent SMS” logs on terminal
grep "Sent SMS" logs.txt | head -n 10


Explanation:

grep filters the lines containing “Sent SMS”

head -n 10 shows only the first 10

2️⃣5️⃣ e. Show first 25 “Sent SMS” logs
grep "Sent SMS" logs.txt | head -n 25

🔚 f. Show last 15 “Sent SMS” logs
grep "Sent SMS" logs.txt | tail -n 15

📊 g. Sort and extract formatted data:

“date time, Source_Mask, Destination, Message Length”

Use awk (powerful log parser):

grep "Sent SMS" logs.txt | awk '{ 
    date=$1; 
    time=$2; 
    split($0,a," "); 
    for(i=1;i<=NF;i++){
        if($i ~ /Source_Mask=/) sm=substr($i,13);
        if($i ~ /Destination=/) dst=substr($i,13);
        if($i ~ /Length=/) len=substr($i,8);
    } 
    print date, time ",", sm ",", dst ",", len 
}'


Output:

2025-10-22 10:15:32 , 92300 , 923111111111 , 150
2025-10-22 10:15:33 , 92301 , 923222222222 , 140
2025-10-22 10:15:35 , 92303 , 923444444444 , 130

🧠 BONUS: Summary Table
Task	Command	Tool
Delete “92” numbers	sed 's/92[0-9]*//g' logs.txt	sed
Add character at end	sed 's/$/#/' logs.txt	sed
Count total lines	wc -l logs.txt	wc
Count “Sent SMS”	grep -c "Sent SMS" logs.txt	grep
Show first 10 logs	grep "Sent SMS" logs.txt | head -n 10	grep + head
Show last 15 logs	grep "Sent SMS" logs.txt | tail -n 15	grep + tail
Extract structured fields	complex awk command	awk

------------------------------------------

MONIT

RANDOM:
a.	Stat command, create files with old dates.
b.	Monit (all tasks related to monit)
i.	https://www.cyberciti.biz/faq/how-to-install-and-use-monit-on-ubuntudebian-linux-server/
ii.	https://www.howtoforge.com/tutorial/server-monitoring-with-munin-and-monit-on-centos/2/




What is Monit?

Monit is a Linux monitoring and self-healing tool.
It’s like a watchdog sitting inside your system — constantly checking if things are working fine.
If something breaks, Monit doesn’t just tell you — it fixes it automatically. 🔁

Think of it this way:

🧍 You = System admin
⚙️ Monit = Assistant who checks if your services (like Nginx, MySQL, SSH, etc.) are alive every minute
💥 If something crashes → Monit restarts it
✉️ If it can’t fix it → Monit emails you an alert

💡 2️⃣ Why Use Monit?

Because in real-world servers:

Services crash.

Disk fills up.

Processes hang.

You can’t babysit every app 24/7.

Monit automates that.
It monitors, restarts, and alerts — all without your manual involvement.

🧩 3️⃣ How Monit Works (Simple Concept)

Monit runs a small background daemon that:

Reads its configuration file (/etc/monit/monitrc or /etc/monit/conf.d/)

Performs checks every X seconds (default: 30)

Takes actions (start, stop, restart, alert) if conditions fail

⚙️ 4️⃣ Real Example – Monitor & Restart Nginx

Let’s say you want to make sure your Nginx web server never goes down.
Here’s how Monit handles it 👇

Config file:

check process nginx with pidfile /run/nginx.pid
    start program = "/usr/sbin/service nginx start"
    stop program  = "/usr/sbin/service nginx stop"
    if failed port 80 protocol http then restart
    if 5 restarts within 5 cycles then timeout

 Breakdown:

check process nginx: tells Monit to watch the Nginx process

with pidfile /run/nginx.pid: how Monit identifies it’s running

start program: how to start it if it’s stopped

stop program: how to stop it

if failed port 80 ... then restart: if Nginx stops responding → restart it

if 5 restarts ... then timeout: stop trying if it fails too often

So basically:

 Nginx stops working →  Monit restarts it automatically.

 How to Install Monit

For Ubuntu/Debian:

sudo apt update
sudo apt install monit -y


For CentOS/RHEL:

sudo yum install monit -y
 Enable Web Dashboard (to see everything visually)

Monit includes a small web UI.

Open the main config:

sudo nano /etc/monit/monitrc


Uncomment and edit this section:

set httpd port 2812 and
    use address localhost  # or 0.0.0.0 if you want remote access
    allow localhost        # or allow user:password


Then restart Monit:

sudo systemctl enable monit
sudo systemctl start monit


Now open your browser:
http://localhost:2812

You’ll see:

CPU usage

Memory

Disk space

Status of each monitored service

Common Monit Commands
Command	Description
monit status	See full status of everything Monit watches
monit summary	Short summary of all monitored services
monit reload	Reload config after editing
monit start nginx	Start a specific service
monit stop nginx	Stop a specific service
monit restart nginx	Restart that service
monit quit	Stop the Monit daemon
 Real-world Use Case (as a DevOps Engineer)

You can use Monit to:

Restart Nginx, MySQL, or Node.js if they crash

Alert when disk usage > 90%

Restart SSH if it hangs

Monitor custom scripts or ports

Track system metrics (CPU, RAM, load average)

 Sample Advanced Check

Monitor CPU load:

check system myserver
    if loadavg (1min) > 4 then alert
    if memory usage > 90% then alert
    if cpu usage (user) > 70% for 5 cycles then alert


Monit will automatically email you alerts if these conditions trigger.

 Summary
Concept	Meaning
Monit	Monitoring + Self-healing tool
Goal	Keep services alive automatically
Config location	/etc/monit/monitrc or /etc/monit/conf.d/
Web UI	Port 2812
Main Benefit	Monit restarts failed services instantly without you touching the server

stat Command & Creating Files with Old Dates
🧠 What It Does

stat shows detailed info about a file — size, permissions, timestamps, etc.

stat filename


Example output:

Access: 2025-10-26 11:30:12
Modify: 2025-10-25 23:10:45
Change: 2025-10-25 23:10:45

🕒 To Create a File with an Old Date

You can use touch with -t flag:

touch -t 202309141200 oldfile.txt


This sets the modified time to:

September 14, 2023, 12:00 PM

To verify:

stat oldfile.txt

🧠 B. MONIT (From the two articles)

Those two tutorials teach how to install, configure, and use Monit on Ubuntu/Debian and CentOS.

🔧 1️⃣ Install Monit

Ubuntu/Debian:

sudo apt update
sudo apt install monit -y


CentOS/RHEL:

sudo yum install epel-release -y
sudo yum install monit -y

⚙️ 2️⃣ Start & Enable
sudo systemctl enable monit
sudo systemctl start monit

🌐 3️⃣ Enable Web Interface

Edit /etc/monit/monitrc:

set httpd port 2812 and
    use address localhost
    allow localhost


Restart:

sudo systemctl restart monit


Open browser → http://localhost:2812

💼 4️⃣ Add Monit Checks

Example 1: Monitor Nginx

check process nginx with pidfile /run/nginx.pid
  start program = "/usr/sbin/service nginx start"
  stop program  = "/usr/sbin/service nginx stop"
  if failed port 80 protocol http then restart


Example 2: Monitor Disk Usage

check filesystem rootfs with path /
    if space usage > 80% then alert


Example 3: Monitor Memory/CPU

check system $HOST
    if memory usage > 90% then alert
    if loadavg (1min) > 4 then alert


Example 4: Email Alerts

set mailserver smtp.gmail.com port 587
    username "you@gmail.com" password "app-password"
set alert you@gmail.com


✅ So Monit:

Monitors services (nginx, sshd, mysql)

Restarts them if they fail

Sends email alerts

🔐 C. SSH Configuration

All SSH settings live in /etc/ssh/sshd_config.

🔸 1. Change SSH Port
sudo nano /etc/ssh/sshd_config


Change:

Port 2222


Then restart SSH:

sudo systemctl restart ssh


Now you connect like:

ssh -p 2222 user@server

🔸 2. Set SSH Login Banner

Edit /etc/issue.net:

Authorized access only! All actions are logged.


Then in sshd_config:

Banner /etc/issue.net

🔸 3. Enable SSH Key Authentication

Generate keys on client:

ssh-keygen


Copy to server:

ssh-copy-id user@server


Now login without password.

🔸 4. Restrict SSH from Specific IPs

In /etc/ssh/sshd_config:

AllowUsers user@192.168.1.*
DenyUsers user@*

🔸 5. Disable Root Login
PermitRootLogin no

🔸 6. Limit Wrong Attempts
MaxAuthTries 3


Restart SSH:

sudo systemctl restart ssh

⚡ D. Rsync, Tar, Mount
🔁 Rsync (for syncing files)
rsync -avz /source/path user@server:/dest/path


-a → archive mode

-v → verbose

-z → compression

Example:

rsync -avz /home/user/files/ root@192.168.1.10:/backup/

📦 Tar (for archiving/compression)

Create:

tar -cvf backup.tar /path/to/folder


Create + compress:

tar -czvf backup.tar.gz /path/to/folder


Extract:

tar -xvzf backup.tar.gz

💽 Mount (for attaching drives or ISO)

Mount a drive:

sudo mount /dev/sdb1 /mnt


Unmount:

sudo umount /mnt


Mount ISO:

sudo mount -o loop file.iso /mnt

🕵️ E. Tshark & Wireshark Analysis
1️⃣ Install Tshark
sudo apt install tshark -y

2️⃣ Capture Packets
sudo tshark -i eth0 -c 100 -w capture.pcap


-i eth0 = interface

-c 100 = capture 100 packets

-w = write to a file

You’ll get a file like capture.pcap.

3️⃣ Open in Wireshark (GUI Tool)

Transfer file to your local system and open with Wireshark:

wireshark capture.pcap


Now you can analyze:

HTTP requests/responses

DNS lookups

TCP handshakes

Packet size, timing, IP source/destination

Example:
Filter for HTTP packets:

http


Filter for a specific IP:

ip.addr == 192.168.1.10

🧭 Final Summary
Task	Tool/Command	Purpose
Monitor & Auto-restart Services	Monit	Detect & fix failed services
Check File Timestamps	stat, touch	View & set custom file dates
Secure SSH	/etc/ssh/sshd_config	Change port, banner, disable root, limit attempts
Sync Files	rsync	Fast transfer & backup
Archive Data	tar	Compress or extract files
Mount Drives/ISOs	mount	Attach or unmount devices
Packet Capture & Analysis	tshark, wireshark	Capture and inspect network traffic

🔥 Perfect — welcome to your **first real DevOps Mini Project Lab** 🧠💻
We’re going to do everything *practically*, just like a real Linux admin or DevOps engineer on a live server.

This will combine everything you mentioned — **Monit, SSH security, rsync, tar, mount, tshark, and stat** — step-by-step.
You can do this easily on your own **Ubuntu Server VM or WSL**.

---

# 🧱 **DEVOPS PRACTICAL LAB — LEVEL 1**

## 🧰 Prerequisites

* Ubuntu (Server or Desktop or WSL)
* Internet access
* `sudo` privileges

---

## 🧩 PART 1 — File Monitoring & Timestamp

### 🪶 Step 1: Create file and view details

```bash
touch report.txt
stat report.txt
```

### 🕰 Step 2: Change modification date (simulate old logs)

```bash
touch -t 202301011230 report.txt
stat report.txt
```

✅ You’ve now created a file with a custom (old) date.

---

## ⚙️ PART 2 — Install and Configure Monit

### Step 1: Install

```bash
sudo apt update
sudo apt install monit -y
```

### Step 2: Enable and start Monit

```bash
sudo systemctl enable monit
sudo systemctl start monit
sudo systemctl status monit
```

### Step 3: Enable web interface

```bash
sudo nano /etc/monit/monitrc
```

Uncomment:

```
set httpd port 2812 and
    use address localhost
    allow localhost
```

### Step 4: Restart Monit

```bash
sudo systemctl restart monit
```

### Step 5: Open in browser

👉 `http://localhost:2812`

---

### Step 6: Add a Service Check (like Nginx)

```bash
sudo apt install nginx -y
sudo nano /etc/monit/conf.d/nginx
```

Paste:

```bash
check process nginx with pidfile /run/nginx.pid
    start program = "/usr/sbin/service nginx start"
    stop program  = "/usr/sbin/service nginx stop"
    if failed port 80 protocol http then restart
```

Then reload:

```bash
sudo monit reload
sudo monit summary
```

✅ Now Monit will restart Nginx automatically if it goes down.

---

## 🔐 PART 3 — SSH Security Configuration

### Step 1: Change SSH port

```bash
sudo nano /etc/ssh/sshd_config
```

Change:

```
Port 2222
```

Then:

```bash
sudo systemctl restart ssh
```

Login using:

```bash
ssh -p 2222 user@server_ip
```

---

### Step 2: Add a Banner

```bash
echo "Authorized access only! Actions are logged." | sudo tee /etc/issue.net
sudo nano /etc/ssh/sshd_config
```

Add:

```
Banner /etc/issue.net
```

Restart SSH:

```bash
sudo systemctl restart ssh
```

---

### Step 3: Disable Root Login

In `/etc/ssh/sshd_config`:

```
PermitRootLogin no
```

---

### Step 4: Limit Login Attempts

```
MaxAuthTries 3
```

Restart:

```bash
sudo systemctl restart ssh
```

---

### Step 5: Key-based Login (Passwordless SSH)

On **client machine**:

```bash
ssh-keygen
ssh-copy-id user@server_ip
```

Now test:

```bash
ssh user@server_ip
```

✅ No password needed!

---

## 🔁 PART 4 — Rsync, Tar, Mount Practice

### A. Rsync File Backup

```bash
rsync -avz /etc/ root@server2:/backup/
```

(Replace `server2` with another server IP or local path)

### B. Tar Archive

```bash
tar -czvf backup.tar.gz /var/log/
ls -lh backup.tar.gz
```

### C. Mount ISO

```bash
sudo mkdir /mnt/iso
sudo mount -o loop /path/to/file.iso /mnt/iso
ls /mnt/iso
sudo umount /mnt/iso
```

---

## 🧠 PART 5 — Tshark & Wireshark

### Step 1: Install Tshark

```bash
sudo apt install tshark -y
```

### Step 2: List Interfaces

```bash
tshark -D
```

### Step 3: Capture Packets

```bash
sudo tshark -i eth0 -c 100 -w capture.pcap
```

### Step 4: Analyze in Wireshark (GUI)

Transfer file to your PC and open:

```
wireshark capture.pcap
```

Filters:

* HTTP traffic → `http`
* TCP only → `tcp`
* IP filter → `ip.addr == 192.168.1.5`

✅ You’ll see detailed packet info (source, destination, timing, protocol, payload).

---

## 🧾 PART 6 — Bonus: Email Alert in Monit

Add this to `/etc/monit/monitrc`:

```bash
set mailserver smtp.gmail.com port 587
    username "your@gmail.com" password "your-app-password"
set alert your@gmail.com
```

Now Monit will send email alerts when something fails.

---

## 🚀 LAB SUMMARY

| Topic              | Tool/Command          | What You Learned                     |
| ------------------ | --------------------- | ------------------------------------ |
| File timestamps    | `stat`, `touch -t`    | Change file modification time        |
| Service monitoring | `monit`               | Auto-restart and web dashboard       |
| SSH hardening      | `sshd_config`         | Secure login, banner, key-based auth |
| File sync          | `rsync`               | Transfer/backup efficiently          |
| Archiving          | `tar`                 | Compress and extract                 |
| Mounting           | `mount`, `umount`     | Attach disks or ISOs                 |
| Packet capture     | `tshark`, `wireshark` | Analyze network traffic visually     |

---

c.	Keyless/password less ssh between servers.
d.	ssh configuration (port change, banner change, key enablement, restriction from IPs, enable/disable root logins, max login wrong attempts)
e.	rsyncs, tar, mount
f.	Install tshark, capture some packets of request/response and analyze them in on Wireshark.

Linux Server & Networking Operations Guide
C. Keyless / Password-less SSH Between Servers

Purpose: Enable one server to connect to another without typing a password, usually for automation or syncing files.

Step 1: Generate SSH Key on Source Server

ssh-keygen -t rsa -b 4096 -C "your_email@example.com"


-t rsa → type of key

-b 4096 → key length (strong)

Press Enter to accept default location /home/user/.ssh/id_rsa

Leave passphrase empty for fully automated login

Step 2: Copy Public Key to Destination Server

ssh-copy-id user@destination_server_ip


Alternative manual method:

cat ~/.ssh/id_rsa.pub | ssh user@destination_server_ip "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys"


Step 3: Test Password-less Login

ssh user@destination_server_ip


Should log in without prompting for password.

Security Tip: Set proper permissions on destination:

chmod 700 ~/.ssh
chmod 600 ~/.ssh/authorized_keys

D. SSH Configuration

Location: /etc/ssh/sshd_config

1. Change SSH Port
# Edit SSH config
Port 2222


Avoid default 22 to reduce brute-force attacks.

Restart SSH:

sudo systemctl restart ssh

2. Add Banner
Banner /etc/issue.net


Create /etc/issue.net with warning message:

Authorized access only! All actions are monitored.

3. Enable Key-based Authentication
PubkeyAuthentication yes
PasswordAuthentication no


Restart SSH service:

sudo systemctl restart ssh

4. Restrict SSH Access to Specific IPs
# Allow only a specific IP
AllowUsers user@192.168.1.10

5. Disable Root Login
PermitRootLogin no


Recommended to use a normal user with sudo privileges.

6. Limit Maximum Wrong Login Attempts
MaxAuthTries 3


Adds protection against brute-force attacks.

E. Rsync, Tar, Mount
1. Rsync – Sync/Backup Files Between Servers
# Basic usage
rsync -avz /local/folder/ user@remote_server:/remote/folder/

# Explanation:
# -a : archive mode (preserves permissions, symlinks)
# -v : verbose
# -z : compress during transfer

2. Tar – Archive and Compress Files
# Create archive
tar -czvf backup.tar.gz /var/log/

# Extract archive
tar -xzvf backup.tar.gz


Flags:

Flag	Meaning
c	create archive
x	extract archive
z	gzip compression
v	verbose output
f	filename
3. Mount – Attach Storage or ISO
# Mount ISO
sudo mount -o loop file.iso /mnt

# Unmount
sudo umount /mnt


Mount partitions:

sudo mount /dev/sdb1 /mnt


Check mounts:

df -h
mount | grep /mnt

F. Tshark & Wireshark – Packet Capture and Analysis

Step 1: Install Tshark

sudo apt update
sudo apt install tshark -y


Step 2: Capture Packets

sudo tshark -i eth0 -c 100 -w capture.pcap


-i eth0 → interface to capture

-c 100 → capture 100 packets

-w capture.pcap → write to file

Step 3: Open Capture in Wireshark

wireshark capture.pcap


Analyze traffic visually: filter by protocol, IP, port

Useful Filters in Wireshark:

Filter	Meaning
http	Only HTTP traffic
tcp	Only TCP traffic
ip.addr == 192.168.1.5	Packets to/from this IP
tcp.port == 80	Packets on port 80
✅ Summary Table
Task	Command / File	Purpose
Keyless SSH	ssh-keygen + ssh-copy-id	Passwordless login between servers
SSH Config	/etc/ssh/sshd_config	Secure SSH (port, banner, keys, root, max login)
Rsync	rsync -avz	File sync/backup
Tar	tar -czvf / tar -xzvf	Archive & compress files
Mount	mount /dev/sdb1 /mnt	Attach disks or ISOs
Packet Capture	tshark -i eth0 -w file.pcap	Capture network traffic
Analyze Packets	Wireshark	Inspect requests/responses visually









